AWSTemplateFormatVersion: '2010-09-09'
Description: An example CloudFormation template for Fargate.

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
          ClusterName: democluster
      
  ECSTaskdefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: demo-task
      Cpu: .5 vCPU
      Memory: 1 GB
      NetworkMode: awsvpc
      ExecutionRoleArn: arn:aws:iam::518214089835:role/ecs-role
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "Demo-container"
          Image: "manasakg/my-appache:v2"
          Essential: true          
          PortMappings:
            - ContainerPort: 80
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application 
      Name: DemoloadBalancer
      Scheme: internet-facing
      Subnets:
       - subnet-0a2f6d226c45267f1
       - subnet-0ef2043d280ab3473
      SecurityGroups:
            - sg-064b71da7d57df26a
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Demotarget
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0fc64df872e7e2dcd
      TargetType: ip
      HealthCheckIntervalSeconds: 60
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP            
  ECSservice:
    Type: 'AWS::ECS::Service'
    DependsOn:
       - ListenerHTTPS
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: demoservice
      TaskDefinition: !Ref ECSTaskdefinition
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: Demo-container
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - sg-064b71da7d57df26a
          Subnets:
            - subnet-0a2f6d226c45267f1
            - subnet-0ef2043d280ab3473    
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Demorole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
                - ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess 
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow traffic to containers
      VpcId: vpc-0fc64df872e7e2dcd
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
